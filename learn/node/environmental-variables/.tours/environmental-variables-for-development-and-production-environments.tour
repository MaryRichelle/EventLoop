{
  "$schema": "https://aka.ms/codetour-schema",
  "title": "Environmental variables for development and production environments",
  "steps": [
    {
      "file": "package.json",
      "description": "We install the `cross-env` development module in order to declare and use environmental variables across all operating systems (Unix, Linux, Mac, Windows) using one syntax.",
      "line": 19
    },
    {
      "file": "package.json",
      "description": "Here, we set a different enviromental value depending on the environment we are about to run (dev for development, prod for production).\n\nOf course, these scripts can be executed via the `npm run dev` and `npm run prod` commands, and can also take custom names, \ne.g. `\"development\" : \"cross-env ...\"`",
      "line": 8
    },
    {
      "file": "app.js",
      "description": "Dotenv is a zero-dependency module that loads environment variables from a .env file into process.env. \n\nStoring configuration in the environment separate from code is based on The Twelve-Factor App methodology (https://12factor.net/config).",
      "line": 3
    },
    {
      "file": "app.js",
      "description": "We can read the environmental variables via the `process.env` object.\n\nFor example, an environmental variable found in our .env file like this:\n\nAPI=https://codeworks.me\n\n...can be acccessed in our JS code, like this:\n\n`console.log( process.env.API );`\n\nThe value of `environment` will be `production` for `npm start prod` and `development` for `npm start dev`.\n",
      "line": 5
    },
    {
      "file": "app.js",
      "description": "By default, the `dotenv` configuration loads the `.env` file, but we need to declare and use 2 different environmental files using \nthe config options shown in the next step.",
      "line": 8
    },
    {
      "file": "app.js",
      "description": "Here, we read the environmental value of `process.env.NODE_ENV` which was set in the `package.json`:\n\n`\"dev\": \"cross-env NODE_ENV=development node app.js\",`\n`\"prod\": \"cross-env NODE_ENV=production node app.js\"`\n",
      "line": 10
    },
    {
      "file": "app.js",
      "description": "Depending on the script we are running (`npm run dev`, `npm run prod`) we are going to read different values for the `process.env.API` variable, hitting a different API endpoint in each case.\n",
      "line": 19
    },
    {
      "file": "app.js",
      "description": "Use the `PORT` as defined in the `.env.*` files, but also use a default fallback.",
      "line": 30
    }
  ]
}